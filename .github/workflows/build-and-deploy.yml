name: Build images and deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: environment
      build_images: 
        description: "Build image prior to deploy"
        required: true
        type: boolean
        default: false

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_images == 'true' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #5.0.0

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #3.11.1

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #6.18.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository }}/awesome-bulletins:latest

  deploy:
    needs: build-and-push-images
    if: |
     always() && (needs.build-and-push-images.result == 'success' || needs.build-and-push-images.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Print selected environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment }}"
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #5.0.0

      - name: Copy files via SSH
        uses: appleboy/scp-action@ff85246acaad7bdce478db94a363cd2bf7c90345 #1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "./docker-compose.prod.yml, ./docker-compose.yml"
          target: "./app"

      - name: Prepare environment
        uses: appleboy/ssh-action@2ead5e36573f08b82fbfce1504f1a4b05a647c6f #1.2.2
        env:
          GITHUB_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_REGION: ${{ vars.S3_REGION }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          DATABASE_URL: ${{ vars.DATABASE_URL }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGUSER: ${{ secrets.PGUSER }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ secrets.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_CLIENT_ID,GITHUB_CLIENT_SECRET,S3_ENDPOINT,S3_ACCESS_KEY_ID,S3_SECRET_ACCESS_KEY,S3_REGION,S3_BUCKET,DATABASE_URL,PGPASSWORD,PGUSER,SECRET_KEY_BASE,GITHUB_REPOSITORY,GITHUB_ACTOR,GITHUB_TOKEN
          script: |
            whoami
            uname -a
            cd ./app

            echo "Stopping containers for update"
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down

            echo "Logging in to github container registry"
            docker login ghcr.io/$GITHUB_REPOSITORY -u $GITHUB_ACTOR -p $GITHUB_TOKEN

            echo "Pulling new images"
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull

            echo "Preparing .env file"
            echo "GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID" > .env
            echo "GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET" >> .env
            echo "S3_ENDPOINT=$S3_ENDPOINT" >> .env
            echo "S3_ACCESS_KEY_ID=$S3_ACCESS_KEY_ID" >> .env
            echo "S3_SECRET_ACCESS_KEY=$S3_SECRET_ACCESS_KEY" >> .env
            echo "S3_REGION=$S3_REGION" >> .env
            echo "S3_BUCKET=$S3_BUCKET" >> .env
            echo "DATABASE_URL=$DATABASE_URL" >> .env
            echo "PGPASSWORD=$PGPASSWORD" >> .env
            echo "PGUSER=$PGUSER" >> .env
            echo "SECRET_KEY_BASE=$SECRET_KEY_BASE" >> .env

            echo "Starting up containers"
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

            echo "Logging out from registry"
            docker logout